import asyncio
import logging
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.types import BotCommand
from pathlib import Path
from aiogram.fsm.storage.memory import MemoryStorage
import json
from datetime import datetime

from config import BOT_TOKEN
from handlers import (
    phase_router,
    quests_router,
    insight_router,
    reflect_router,
    reminder_router,
    user_router,
    settings_router,
    onboarding_router,
    buttons_router,
    faq_router,
)

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)

DATA_FILE = Path("storage/data.json")

storage = MemoryStorage()
dp = Dispatcher(storage=MemoryStorage())

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(phase_router)
dp.include_router(quests_router)
dp.include_router(insight_router)
dp.include_router(reflect_router)
dp.include_router(reminder_router)
dp.include_router(user_router)
dp.include_router(settings_router)
dp.include_router(onboarding_router)
dp.include_router(buttons_router)
dp.include_router(faq_router)

async def reminder_loop(bot: Bot):
    while True:
        if DATA_FILE.exists():
            with open(DATA_FILE, "r") as f:
                data = json.load(f)

            now = datetime.now().strftime("%H:%M")

            for user_id, user_data in data.items():
                if user_data.get("reminder_enabled") and user_data.get("reminder_time") == now:
                    try:
                        await bot.send_message(int(user_id), "üßò –ü–æ—Ä–∞ –Ω–∞ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é. –ù–∞–ø–∏—à–∏ /reflect")
                    except Exception as e:
                        print(f"Failed to send reminder to {user_id}: {e}")

        await asyncio.sleep(60)  # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

async def main():
    # –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    asyncio.create_task(reminder_loop(bot))

    await bot.set_my_commands([
        BotCommand(command="help", description="–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º"),
        BotCommand(command="faq", description="–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã"),
        BotCommand(command="me", description="–ú–æ–π —Å—Ç–∞—Ç—É—Å"),
        BotCommand(command="settings", description="–ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
        BotCommand(command="today", description="–ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è"),
        BotCommand(command="status", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–≤–µ—Å—Ç—ã"),
        BotCommand(command="start_day", description="–í—ã–±—Ä–∞—Ç—å —Ñ–∞–∑—É –¥–Ω—è"),
        BotCommand(command="add_quest", description="–î–æ–±–∞–≤–∏—Ç—å –∫–≤–µ—Å—Ç"),
        BotCommand(command="reflect", description="–í–µ—á–µ—Ä–Ω—è—è —Ä–µ—Ñ–ª–µ–∫—Å–∏—è"),
        BotCommand(command="reflections", description="–ê—Ä—Ö–∏–≤ —Ä–µ—Ñ–ª–µ–∫—Å–∏–π"),
        BotCommand(command="insight", description="–î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Å–∞–π—Ç"),
        BotCommand(command="thoughts", description="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Å–∞–π—Ç—ã"),
        BotCommand(command="reminder", description="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"),
        BotCommand(command="delete_quest", description="–£–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç")
    ])
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
