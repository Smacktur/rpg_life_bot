from aiogram import Router, F
from aiogram.types import Message
import json
from utils.quest_logic import get_quest_by_phase
from pathlib import Path
from datetime import datetime

router = Router()
DATA_FILE = Path("storage/data.json")

PHASE_LABELS = {
    "active": "‚ö° –ê–∫—Ç–∏–≤–∞",
    "low": "üåÄ –°–ø–∞–¥",
    "fog": "üòµ –ü–æ–¥–≤–∏—Å"
}

async def show_status(message: Message):
    user_id = str(message.from_user.id)

    if not DATA_FILE.exists():
        await message.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏ —Å /start_day")
        return

    with open(DATA_FILE, "r") as f:
        data = json.load(f)

    user_data = data.get(user_id, {})

    phase = user_data.get("phase")
    quests = user_data.get("quests", [])
    insights = user_data.get("insights", [])
    reflections = user_data.get("reflections", [])

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ ---
    last_active = user_data.get("last_active", {})
    print(f"[DEBUG] last_active raw: {json.dumps(last_active, indent=2)}")
    raw_ts = last_active.get("timestamp")

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ timestamp
    timestamp = last_active.get("date", "‚Äî")

    context = last_active.get("context", "‚Äî")
    last_phase = last_active.get("phase", None)
    last_phase_label = PHASE_LABELS.get(last_phase, last_phase.upper()) if last_phase else "‚Äî"


    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–∑
    phase_label = PHASE_LABELS.get(phase, phase.upper()) if phase else "‚Äî"
    last_phase_label = PHASE_LABELS.get(last_phase, last_phase.upper()) if last_phase else "‚Äî"

    # –ü–æ–¥—Å—á—ë—Ç—ã
    active_quests = [q for q in quests if q.get("status") == "todo"]
    done_quests = [q for q in quests if q.get("status") == "done"]

    text = (
        "üë§ <b>–¢–≤–æ–π —Å—Ç–∞—Ç—É—Å</b>\n\n"
        f"üåó –§–∞–∑–∞: <b>{phase_label}</b>\n"
        f"üìã –ö–≤–µ—Å—Ç—ã: <b>{len(active_quests)}</b> –∞–∫—Ç–∏–≤–Ω—ã—Ö / <b>{len(done_quests)}</b> –∑–∞–≤–µ—Ä—à—ë–Ω\n"
        f"üß† –ò–Ω—Å–∞–π—Ç—ã: <b>{len(insights)}</b>\n"
        f"üïØ –†–µ—Ñ–ª–µ–∫—Å–∏–∏: <b>{len(reflections)}</b>\n\n"
        f"üìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:\n"
        f"<b>{timestamp}</b> ‚Äî <i>{context}</i> ({last_phase_label})"
    )

    await message.answer(text)


@router.message(F.text == "/help")
async def help_cmd(message: Message):
    await message.answer(
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî —Ç–≤–æ—è —Ä–æ–ª–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è.\n"
        "–û–Ω –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ –ø—Ä–æ–∂–∏–≤–∞—Ç—å –¥–Ω–∏, –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ü–µ–ª—è–º, –∑–∞–º–µ—á–∞—Ç—å —Å–≤–æ–∏ —Ñ–∞–∑—ã –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Å–∞–π—Ç—ã, —á—Ç–æ–±—ã —Ç—ã –Ω–µ —Ç–µ—Ä—è–ª —Å–µ–±—è –≤ –ø–æ—Ç–æ–∫–µ –∑–∞–¥–∞—á.\n\n"
        "üß≠ <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –±–æ—Ç–æ–º</b>\n\n"
        "1Ô∏è‚É£ <b>–ö–∞–∂–¥–æ–µ —É—Ç—Ä–æ</b> ‚Äî /start_day\n"
        "  ‚Ä¢ –û–ø—Ä–µ–¥–µ–ª–∏ —Å–≤–æ—é —Ñ–∞–∑—É: ‚ö° –ê–∫—Ç–∏–≤–∞ / üåÄ –°–ø–∞–¥ / üòµ –ü–æ–¥–≤–∏—Å\n\n"
        "2Ô∏è‚É£ <b>–î–æ–±–∞–≤—å –∫–≤–µ—Å—Ç—ã</b> ‚Äî /add_quest\n"
        "  ‚Ä¢ –≠—Ç–æ –∑–∞–¥–∞—á–∏ –Ω–∞ –¥–µ–Ω—å / —à–∞–≥–∏ –∫ —Ü–µ–ª—è–º\n\n"
        "3Ô∏è‚É£ <b>–ü—Ä–æ–≤–µ—Ä—å —Å—Ç–∞—Ç—É—Å</b> ‚Äî /status\n"
        "  ‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–∏, —á—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å\n"
        "  ‚Ä¢ –ó–∞–≤–µ—Ä—à–∏ –∑–∞–¥–∞—á–∏ ‚Äî /done (—á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏)\n\n"
        "4Ô∏è‚É£ <b>–ó–∞–ø–∏—Å—ã–≤–∞–π –∏–Ω—Å–∞–π—Ç—ã</b> ‚Äî /insight\n"
        "  ‚Ä¢ –ú—ã—Å–ª–∏, –Ω–∞–±–ª—é–¥–µ–Ω–∏—è, –∏–¥–µ–∏\n"
        "  ‚Ä¢ –°–º–æ—Ç—Ä–∏ –∏—Ö –ø–æ—Ç–æ–º ‚Äî /thoughts\n\n"
        "5Ô∏è‚É£ <b>–í–µ—á–µ—Ä–æ–º ‚Äî —Ä–µ—Ñ–ª–µ–∫—Å–∏—è</b> ‚Äî /reflect\n"
        "  ‚Ä¢ 3 –≤–æ–ø—Ä–æ—Å–∞: —á—Ç–æ –±—ã–ª–æ –≤–∞–∂–Ω—ã–º, —á—Ç–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å\n"
        "  ‚Ä¢ –°–º–æ—Ç—Ä–∏ –∞—Ä—Ö–∏–≤ ‚Äî /reflections\n\n"
        "6Ô∏è‚É£ <b>–ù–∞–≤–∏–≥–∞—Ü–∏—è</b>\n"
        "  ‚Ä¢ /today ‚Äî –ß—Ç–æ –¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è –ø–æ —Ñ–∞–∑–µ\n"
        "  ‚Ä¢ /me ‚Äî –°–≤–æ–¥–∫–∞ –ø–æ —Ç–µ–±–µ\n"
        "  ‚Ä¢ /reminder ‚Äî –ù–∞—Å—Ç—Ä–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —Ä–µ—Ñ–ª–µ–∫—Å–∏–∏\n\n"
        "üìå –ö–æ–º–∞–Ω–¥—ã –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ /"
    )

@router.message(F.text == "/today")
async def handle_today(message: Message):
    text = render_today_message(str(message.from_user.id))
    await message.answer(text)

def render_today_message(user_id: str) -> str:
    if not DATA_FILE.exists():
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏ —Å /start_day"

    with open(DATA_FILE, "r") as f:
        data = json.load(f)

    user_data = data.get(user_id, {})
    phase = user_data.get("phase")
    quests = user_data.get("quests", [])

    if not phase:
        return "–§–∞–∑–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏ /start_day"

    pending = [q for q in quests if q.get("status") == "todo"]
    main_quest = pending[0]["text"] if pending else "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á. –î–æ–±–∞–≤—å —á–µ—Ä–µ–∑ /add_quest"
    tip = get_quest_by_phase(phase)

    return (
        f"üìÖ <b>–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π —Ñ–æ–∫—É—Å</b>\n\n"
        f"üåó –§–∞–∑–∞: <b>{PHASE_LABELS.get(phase, phase.upper())}</b>\n\n"
        f"üéØ –ì–ª–∞–≤–Ω–∞—è –∑–∞–¥–∞—á–∞: <b>{main_quest}</b>\n\n"
        f"üí° –°–æ–≤–µ—Ç –Ω–∞ —Ñ–∞–∑—É:\n{tip}"
    )