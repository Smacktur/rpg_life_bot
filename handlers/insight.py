from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from datetime import datetime
from pathlib import Path
from utils.helpers import update_last_active
import json

router = Router()
DATA_FILE = Path("storage/data.json")

class InsightState(StatesGroup):
    waiting = State()

markup = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_insight")]
])

@router.message(F.text == "/insight")
async def handle_insight(message: Message, state: FSMContext):
    await message.answer(
        "üß† <b>–ü–æ–π–º–∞–ª –∏–Ω—Å–∞–π—Ç?</b>\n\n"
        "–ò–Ω—Å–∞–π—Ç ‚Äî —ç—Ç–æ –º–æ–º–µ–Ω—Ç, –∫–æ–≥–¥–∞ —Ç—ã:\n"
        "‚Ä¢ –ø–æ–Ω—è–ª —á—Ç–æ-—Ç–æ –≤–∞–∂–Ω–æ–µ –æ —Å–µ–±–µ –∏–ª–∏ –º–∏—Ä–µ\n"
        "‚Ä¢ –ø–æ—á—É–≤—Å—Ç–≤–æ–≤–∞–ª '—â—ë–ª–∫–Ω—É–ª–æ'\n"
        "‚Ä¢ —É–≤–∏–¥–µ–ª –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å –∏–ª–∏ –ø—Ä–∏—á–∏–Ω—É\n\n"
        "<b>–§–æ—Ä–º—É–ª–∞:</b>\n"
        "1. –ß—Ç–æ —É–≤–∏–¥–µ–ª (–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ)\n"
        "2. –ß—Ç–æ –ø–æ–Ω—è–ª (–≤—ã–≤–æ–¥)\n"
        "3. –ß—Ç–æ —ç—Ç–æ –º–µ–Ω—è–µ—Ç –¥–ª—è —Ç–µ–±—è\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ —è –Ω–µ –≤—ã—Å—ã–ø–∞—é—Å—å ‚Äî –º–Ω–µ —Å–ª–æ–∂–Ω–µ–µ –≥–æ–≤–æ—Ä–∏—Ç—å ¬´–Ω–µ—Ç¬ª\n"
        "‚Ä¢ –Ø —Ç—è–Ω—É —Å –∑–∞–¥–∞—á–µ–π –Ω–µ –ø–æ—Ç–æ–º—É, —á—Ç–æ –ª–µ–Ω—å, –∞ –ø–æ—Ç–æ–º—É —á—Ç–æ –±–æ—é—Å—å –æ–±–ª–∞–∂–∞—Ç—å—Å—è\n"
        "‚Ä¢ –ú–Ω–µ –≤–∞–∂–Ω–æ –±—ã—Ç—å –Ω–µ –ø—Ä–∞–≤—ã–º, –∞ –ø—Ä–∏–Ω—è—Ç—ã–º ‚Äî –∏ —ç—Ç–æ –º–µ—à–∞–µ—Ç –≤ —Å–ø–æ—Ä–∞—Ö\n\n"
        "üìù –ù–∞–ø–∏—à–∏ —Å–≤–æ–π –∏–Ω—Å–∞–π—Ç:",
        reply_markup=markup
    )
    await state.set_state(InsightState.waiting)

@router.message(InsightState.waiting)
async def save_insight(message: Message, state: FSMContext):
    user_id = str(message.from_user.id)
    insight = message.text.strip()

    if not DATA_FILE.exists():
        data = {}
    else:
        with open(DATA_FILE, "r") as f:
            data = json.load(f)

    user_data = data.get(user_id, {})
    insights = user_data.get("insights", [])

    update_last_active(user_data, context="insight", phase=user_data.get("phase"))

    insights.append({
        "text": insight,
        "date": datetime.now().strftime("%Y-%m-%d %H:%M")
    })
    user_data["insights"] = insights
    data[user_id] = user_data

    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

    await message.answer("‚úÖ –ò–Ω—Å–∞–π—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω.")
    await state.clear()

@router.message(F.text == "/thoughts")
async def handle_thoughts(message: Message):
    user_id = str(message.from_user.id)

    if not DATA_FILE.exists():
        await message.answer("üß† –ú—ã—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    with open(DATA_FILE, "r") as f:
        data = json.load(f)

    insights = data.get(user_id, {}).get("insights", [])

    if not insights:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∏–Ω—Å–∞–π—Ç–∞.")
        return

    await show_insight(message, insights, 0)

async def show_insight(target, insights, index: int):
    insight = insights[index]
    total = len(insights)
    text = (
        f"üß† <b>–ò–Ω—Å–∞–π—Ç #{index + 1} –∏–∑ {total}</b>\n\n"
        f"{insight.get('text')}\n\n"
        f"üïí {insight.get('date', '-') }"
    )

    kb = InlineKeyboardBuilder()
    prev_index = (index - 1) % total
    next_index = (index + 1) % total

    kb.row(
        InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"insight_nav_{prev_index}"),
        InlineKeyboardButton(text="üóëÔ∏è", callback_data=f"insight_delete_{index}"),
        InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"insight_nav_{next_index}")
    )

    if isinstance(target, Message):
        await target.answer(text, reply_markup=kb.as_markup())
    elif isinstance(target, CallbackQuery):
        try:
            await target.message.edit_text(text, reply_markup=kb.as_markup())
        except TelegramBadRequest as e:
            if "message is not modified" in str(e):
                await target.answer("üìå –≠—Ç–æ —É–∂–µ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å.")
            else:
                raise e
        else:
            await target.answer()

@router.callback_query(F.data.startswith("insight_nav_"))
async def handle_insight_navigation(callback: CallbackQuery):
    index = int(callback.data.split("_")[-1])
    user_id = str(callback.from_user.id)

    with open(DATA_FILE, "r") as f:
        data = json.load(f)

    insights = data.get(user_id, {}).get("insights", [])
    if not insights:
        await callback.message.edit_text("–ù–µ—Ç –∏–Ω—Å–∞–π—Ç–æ–≤.")
        return

    await show_insight(callback, insights, index)

@router.callback_query(F.data.startswith("insight_delete_"))
async def delete_insight(callback: CallbackQuery):
    user_id = str(callback.from_user.id)
    index = int(callback.data.split("_")[-1])

    with open(DATA_FILE, "r") as f:
        data = json.load(f)

    insights = data.get(user_id, {}).get("insights", [])

    if index >= len(insights):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å.")
        return

    del insights[index]
    data[user_id]["insights"] = insights

    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=2)

    if not insights:
        await callback.message.edit_text("üß† –í—Å–µ –∏–Ω—Å–∞–π—Ç—ã —É–¥–∞–ª–µ–Ω—ã.")
        await callback.answer()
        return

    new_index = max(0, index - 1)
    await show_insight(callback, insights, new_index)
    await callback.answer("üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ")