from aiogram import Router, F
from aiogram.types import Message, KeyboardButton, ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from handlers.insight import handle_insight
from handlers.reflect import handle_reflect_start
from handlers.phase import handle_start_day
from handlers.quests import start_add_quest, handle_status, handle_done, handle_delete_quest
from handlers.user import show_status, render_today_message, help_cmd
from handlers.settings import show_settings
import logging

router = Router()

keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üë§ –ú–æ–π —Å—Ç–∞—Ç—É—Å")],
        [KeyboardButton(text="üéØ –°–µ–≥–æ–¥–Ω—è"), KeyboardButton(text="‚ûï –ù–æ–≤—ã–π –∫–≤–µ—Å—Ç")],
        [KeyboardButton(text="üéØ –§–æ–∫—É—Å"), KeyboardButton(text="üìã –ö–≤–µ—Å—Ç—ã")],
        [KeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–≤–µ—Å—Ç"), KeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç")],
        [KeyboardButton(text="üïØ –†–µ—Ñ–ª–µ–∫—Å–∏—è"), KeyboardButton(text="üß† –ò–Ω—Å–∞–π—Ç")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True,
    input_field_placeholder="–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ ‚Üì"
)

@router.message(F.text == "/buttons")
async def show_buttons(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.message(F.text == "/faq")
async def handle_faq_command(message: Message):
    from handlers.faq import faq_intro
    await faq_intro(message)

@router.message()
async def handle_keyboard_button(message: Message, state: FSMContext):
    text = message.text.strip()
    logging.info(f"[BUTTONS] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text!r}")

    if "–ú–æ–π —Å—Ç–∞—Ç—É—Å" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: –°–¢–ê–¢–£–°")
        await show_status(message)

    elif "–°–µ–≥–æ–¥–Ω—è" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: –°–ï–ì–û–î–ù–Ø")
        await handle_start_day(message)

    elif "–§–æ–∫—É—Å" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: TODAY")
        text = render_today_message(str(message.from_user.id))
        await message.answer(text)

    elif "–ö–≤–µ—Å—Ç—ã" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: –ö–í–ï–°–¢–´")
        await handle_status(message)

    elif "–ù–æ–≤—ã–π –∫–≤–µ—Å—Ç" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: –ù–û–í–´–ô –ö–í–ï–°–¢")
        await start_add_quest(message, state)

    elif "–ó–∞–≤–µ—Ä—à–∏—Ç—å" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: –ó–ê–í–ï–†–®–ò–¢–¨ –ö–í–ï–°–¢")
        await handle_done(message)

    elif "–ò–Ω—Å–∞–π—Ç" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: –ò–ù–°–ê–ô–¢")
        await handle_insight(message, state)

    elif "–†–µ—Ñ–ª–µ–∫—Å–∏—è" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: –†–ï–§–õ–ï–ö–°–ò–Ø")
        await handle_reflect_start(message, state)

    elif "–ù–∞—Å—Ç—Ä–æ–π–∫–∏" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: –ù–ê–°–¢–†–û–ô–ö–ò")
        await show_settings(message)

    elif "–ü–æ–º–æ—â—å" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: HELP")
        await help_cmd(message)

    elif "–£–¥–∞–ª–∏—Ç—å –∫–≤–µ—Å—Ç" in text:
        logging.info("[BUTTONS] –í—ã–∑–æ–≤: –£–î–ê–õ–ò–¢–¨ –ö–í–ï–°–¢")
        await handle_delete_quest(message)

    else:
        logging.info("[BUTTONS] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")

# –û—Ç–º–µ–Ω–∞ —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫–∏
@router.callback_query(F.data == "cancel_insight")
async def handle_cancel_insight(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Å–∞–π—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()

@router.callback_query(F.data == "cancel_reflect")
async def handle_cancel_reflect(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text("‚ùå –†–µ—Ñ–ª–µ–∫—Å–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.answer()
